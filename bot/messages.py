import datetime
import config


weekdays = ['–ü–Ω','–í—Ç','–°—Ä','–ß—Ç','–ü—Ç','–°–±','–í—Å']
months = ['—è–Ω–≤–∞—Ä—è','—Ñ–µ–≤—Ä–∞–ª—è','–º–∞—Ä—Ç–∞','–∞–ø—Ä–µ–ª—è','–º–∞—è','–∏—é–Ω—è','–∏—é–ª—è','–∞–≤–≥—É—Å—Ç–∞','—Å–µ–Ω—Ç—è–±—Ä—è','–æ–∫—Ç—è–±—Ä—è','–Ω–æ—è–±—Ä—è','–¥–µ–∫–∞–±—Ä—è']


ERROR_START = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'
ERROR_ALLOWED_REQUESTS = 'ü§Ø –í—ã —Å–¥–µ–ª–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ\n\n–î–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞'
WRITE_CITY = '–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É'
SELECT_CITY = '–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö'
SELECT_CITY_ERROR = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∑–∞–Ω–æ–≤–æ'
SUCCESS_CITY_CONNECTED = '‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É'
ERROR_CITY_CONNECTED = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –≥–æ—Ä–æ–¥ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É'
ABOUT = '–≠—Ç–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ –ª–∏—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ @oshkov\n\n–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ API –æ—Ç <a href="https://www.gismeteo.ru/">Gismeteo</a>'
NOTIFICATION_ON = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ãüîî\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 7.00 –∏ 21.00 –ø–æ –º—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å'
NOTIFICATION_OFF = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ãüîï'
LOADING = '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'


def get_date(data, index_data: int):
    date = data[index_data]['date']['local']
    date_obj = datetime.datetime.strptime(str(date), "%Y-%m-%dT%H:%M:%SZ")
    weekday = weekdays[date_obj.weekday()]
    day = date_obj.day
    month = months[date_obj.month - 1]
    date_today_formatted = f'{weekday}, {day} {month}'

    return date_today_formatted

def get_sunrise_time(data, index_data: int):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Ö–æ–¥–∞, –∑–∞—Ö–æ–¥–∞ —Å–æ–ª–Ω—Ü–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è—Ä–Ω–æ–≥–æ –¥–Ω—è/–Ω–æ—á–∏
    sunrise_date = datetime.datetime.fromisoformat(data[index_data]['astro']['sun']['sunrise'])
    date_today = datetime.datetime.now().date()

    sunrise_hours = sunrise_date.hour
    sunrise_minutes = sunrise_date.minute
    if sunrise_minutes < 10:
        sunrise_minutes = f'0{sunrise_minutes}'
    sunrise_time = f'{sunrise_hours}:{sunrise_minutes}'
    if sunrise_date.date() != date_today:
        month = months[sunrise_date.month - 1]
        day = sunrise_date.day
        sunrise_time = f'{day} {month}, {sunrise_hours}:{sunrise_minutes}'

    return sunrise_time

def get_sunset_time(data, index_data: int):
    sunset_date = datetime.datetime.fromisoformat(data[index_data]['astro']['sun']['sunset'])
    date_today = datetime.datetime.now().date()

    sunset_hours = sunset_date.hour
    sunset_minutes = sunset_date.minute
    if sunset_minutes < 10:
        sunset_minutes = f'0{sunset_minutes}'
    sunset_time = f'{sunset_hours}:{sunset_minutes}'
    if sunset_date.date() != date_today:
        month = months[sunset_date.month - 1]
        day = sunset_date.day
        sunset_time = f'{day} {month}, {sunset_hours}:{sunset_minutes}'

    return sunset_time

def get_polar(data, index_data: int):
    polar = data[index_data]['astro']['sun']['polar']
    polar_text = ''
    if polar == 'day':
        polar_text = '<b>–ü–æ–ª—è—Ä–Ω—ã–π –¥–µ–Ω—å ‚òÄÔ∏è</b>\n'
    elif polar == 'night':
        polar_text = '<b>–ü–æ–ª—è—Ä–Ω–∞—è –Ω–æ—á—å üåô</b>\n'

    return polar_text


async def WEATHER_NOW(weather):
    # –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
    data = weather['data']

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    name_p = data['city']['nameP']
    emoji = data['icon']['emoji']
    description = data['description']
    wind_speed = round(data['wind']['speed']['m_s'])

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    temperature = round(data['temperature']['air']['C'])
    if temperature > 0:
        temperature = f"+{temperature}"

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –æ—â—É—â–µ–Ω–∏—è–º
    temperature_comfort = round(data['temperature']['comfort']['C'])
    if temperature_comfort > 0:
        temperature_comfort = f"+{temperature_comfort}"

    return f'–ü–æ–≥–æ–¥–∞ {name_p} —Å–µ–π—á–∞—Å:\n\n<b>{emoji} {description}, {temperature}¬∞, {wind_speed} –º/—Å</b>\n\n–ü–æ –æ—â—É—â–µ–Ω–∏—è–º {temperature_comfort}'


async def WEATHER_TODAY(weather):
    # –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
    data = weather['data']

    # –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–Ω–æ–º –ø–∞–¥–µ–∂–µ
    name_p = data[0]['city']['nameP']

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Å–µ–≥–æ–¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç: –í—Ç, 5 –º–∞—Ä—Ç–∞
    date = get_date(data, 0)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Ö–æ–¥–∞, –∑–∞—Ö–æ–¥–∞ —Å–æ–ª–Ω—Ü–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è—Ä–Ω–æ–≥–æ –¥–Ω—è/–Ω–æ—á–∏
    sunrise_time = get_sunrise_time(data, 0)
    sunset_time = get_sunset_time(data, 0)
    polar_text = get_polar(data, 0)

    indexes = [2,3,4,5,6,7]
    times = []
    emojis = []
    temperatures = []
    descriptions = []
    wind_speeds = []

    for index in indexes:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        time = data[index]['date']['local'][11:16].replace(":", ".")
        times.append(time)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
        emoji = data[index]['icon']['emoji']
        emojis.append(emoji)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
        temperature = round(data[index]['temperature']['air']['C'])
        temperatures.append(temperature)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π –ø–æ–≥–æ–¥—ã
        description = data[index]['description']
        descriptions.append(description)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ç—Ä–∞
        wind_speed = round(data[index]['wind']['speed']['m_s'])
        wind_speeds.append(wind_speed)

    return f'–ü–æ–≥–æ–¥–∞ {name_p} —Å–µ–≥–æ–¥–Ω—è ({date}):\n\n<b>{times[0]}:</b> {emojis[0]} {temperatures[0]}¬∞, {descriptions[0]}, {wind_speeds[0]} –º/—Å\n<b>{times[1]}:</b> {emojis[1]} {temperatures[1]}¬∞, {descriptions[1]}, {wind_speeds[1]} –º/—Å\n<b>{times[2]}:</b> {emojis[2]} {temperatures[2]}¬∞, {descriptions[2]}, {wind_speeds[2]} –º/—Å\n<b>{times[3]}:</b> {emojis[3]} {temperatures[3]}¬∞, {descriptions[3]}, {wind_speeds[3]} –º/—Å\n<b>{times[4]}:</b> {emojis[4]} {temperatures[4]}¬∞, {descriptions[4]}, {wind_speeds[4]} –º/—Å\n<b>{times[5]}:</b> {emojis[5]} {temperatures[5]}¬∞, {descriptions[5]}, {wind_speeds[5]} –º/—Å\n\n{polar_text}<b>–í–æ—Å—Ö–æ–¥:</b> {sunrise_time}\n<b>–ó–∞—Ö–æ–¥:</b> {sunset_time}'


async def WEATHER_TOMORROW(weather):
    # –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
    data = weather['data']

    # –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–Ω–æ–º –ø–∞–¥–µ–∂–µ
    name_p = data[0]['city']['nameP']

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Å–µ–≥–æ–¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç: –í—Ç, 5 –º–∞—Ä—Ç–∞
    date = get_date(data, 9)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Ö–æ–¥–∞, –∑–∞—Ö–æ–¥–∞ —Å–æ–ª–Ω—Ü–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è—Ä–Ω–æ–≥–æ –¥–Ω—è/–Ω–æ—á–∏
    sunrise_time = get_sunrise_time(data, 9)
    sunset_time = get_sunset_time(data, 9)
    polar_text = get_polar(data, 9)

    indexes = [10,11,12,13,14,15]
    times = []
    emojis = []
    temperatures = []
    descriptions = []
    wind_speeds = []

    for index in indexes:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        time = data[index]['date']['local'][11:16].replace(":", ".")
        times.append(time)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
        emoji = data[index]['icon']['emoji']
        emojis.append(emoji)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
        temperature = round(data[index]['temperature']['air']['C'])
        temperatures.append(temperature)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π –ø–æ–≥–æ–¥—ã
        description = data[index]['description']
        descriptions.append(description)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ç—Ä–∞
        wind_speed = round(data[index]['wind']['speed']['m_s'])
        wind_speeds.append(wind_speed)

    return f'–ü–æ–≥–æ–¥–∞ {name_p} –∑–∞–≤—Ç—Ä–∞ ({date}):\n\n<b>{times[0]}:</b> {emojis[0]} {temperatures[0]}¬∞, {descriptions[0]}, {wind_speeds[0]} –º/—Å\n<b>{times[1]}:</b> {emojis[1]} {temperatures[1]}¬∞, {descriptions[1]}, {wind_speeds[1]} –º/—Å\n<b>{times[2]}:</b> {emojis[2]} {temperatures[2]}¬∞, {descriptions[2]}, {wind_speeds[2]} –º/—Å\n<b>{times[3]}:</b> {emojis[3]} {temperatures[3]}¬∞, {descriptions[3]}, {wind_speeds[3]} –º/—Å\n<b>{times[4]}:</b> {emojis[4]} {temperatures[4]}¬∞, {descriptions[4]}, {wind_speeds[4]} –º/—Å\n<b>{times[5]}:</b> {emojis[5]} {temperatures[5]}¬∞, {descriptions[5]}, {wind_speeds[5]} –º/—Å\n\n{polar_text}<b>–í–æ—Å—Ö–æ–¥:</b> {sunrise_time}\n<b>–ó–∞—Ö–æ–¥:</b> {sunset_time}'


async def WEATHER_10_DAYS(weather):
    # –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
    data = weather['data']

    # –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–Ω–æ–º –ø–∞–¥–µ–∂–µ
    name_p = data[0]['city']['nameP']

    indexes = [5,13,21,29,37,45,53,61,69,77]
    dates = []
    emojis = []
    temperatures = []
    descriptions = []
    wind_speeds = []

    for index in indexes:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Å–µ–≥–æ–¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç: –í—Ç, 5 –º–∞—Ä—Ç–∞
        date = get_date(data, index)
        dates.append(date)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
        emoji = data[index]['icon']['emoji']
        emojis.append(emoji)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
        temperature = round(data[index]['temperature']['air']['C'])
        temperatures.append(temperature)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π –ø–æ–≥–æ–¥—ã
        description = data[index]['description']
        descriptions.append(description)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ç—Ä–∞
        wind_speed = round(data[index]['wind']['speed']['m_s'])
        wind_speeds.append(wind_speed)

    return f'–ü–æ–≥–æ–¥–∞ {name_p} –Ω–∞ 10 –¥–Ω–µ–π:\n\n<b>{dates[0]}:</b> {emojis[0]} {temperatures[0]}¬∞, {descriptions[0]}, {wind_speeds[0]} –º/—Å\n<b>{dates[1]}:</b> {emojis[1]} {temperatures[1]}¬∞, {descriptions[1]}, {wind_speeds[1]} –º/—Å\n<b>{dates[2]}:</b> {emojis[2]} {temperatures[2]}¬∞, {descriptions[2]}, {wind_speeds[2]} –º/—Å\n<b>{dates[3]}:</b> {emojis[3]} {temperatures[3]}¬∞, {descriptions[3]}, {wind_speeds[3]} –º/—Å\n<b>{dates[4]}:</b> {emojis[4]} {temperatures[4]}¬∞, {descriptions[4]}, {wind_speeds[4]} –º/—Å\n<b>{dates[5]}:</b> {emojis[5]} {temperatures[5]}¬∞, {descriptions[5]}, {wind_speeds[5]} –º/—Å\n<b>{dates[6]}:</b> {emojis[6]} {temperatures[6]}¬∞, {descriptions[6]}, {wind_speeds[6]} –º/—Å\n<b>{dates[7]}:</b> {emojis[7]} {temperatures[7]}¬∞, {descriptions[7]}, {wind_speeds[7]} –º/—Å\n<b>{dates[8]}:</b> {emojis[8]} {temperatures[8]}¬∞, {descriptions[8]}, {wind_speeds[8]} –º/—Å\n<b>{dates[9]}:</b> {emojis[9]} {temperatures[9]}¬∞, {descriptions[9]}, {wind_speeds[9]} –º/—Å'


async def STATS(month_requests, users, redis_connect, db_connect):
    # –°–æ–∑–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    user_requests_info = {
        'bot': {
            'name': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            'allowed_requests': None,
            'used_requests': 0
            }
        }

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user in users:
        if user.id not in user_requests_info:
            user_requests_info[user.id] = {'name': config.USERS[user.id], 'allowed_requests': user.allowed_requests, 'used_requests': 0}

    # –ü–æ–¥—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    requests_amount = 0
    for request in month_requests:
        user_requests_info[request.creator_id]['used_requests'] += 1
        requests_amount += 1

    message = f'<b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {"üü¢" if db_connect else "üî¥"}</b>\n\n<b>–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: {"üü¢" if redis_connect else "üî¥"}</b>\n\n<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:</b>\n'

    for id, data in user_requests_info.items():
        used_requests = data["used_requests"]
        if data["allowed_requests"] != None:
            allowed_requests = f'/{data["allowed_requests"]}'
        else:
            allowed_requests = ''
        user_name = data['name']
        
        message += f'{user_name}: {used_requests}{allowed_requests} —à—Ç.\n'

    message += f'<b>–í—Å–µ–≥–æ: {requests_amount}/1000 —à—Ç.</b>'
    return message


async def DATABASE_ERROR(error):
    return f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {error}'


async def ERROR(error):
    return f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {error}'